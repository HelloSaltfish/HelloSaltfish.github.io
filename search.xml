<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《MySQL是怎样运行的》阅读笔记</title>
      <link href="/2021/06035534.html"/>
      <url>/2021/06035534.html</url>
      
        <content type="html"><![CDATA[<hr><hr><h1 id="第1章-装作自己是个小白——初识MySQL"><a href="#第1章-装作自己是个小白——初识MySQL" class="headerlink" title="第1章 装作自己是个小白——初识MySQL"></a>第1章 装作自己是个小白——初识MySQL</h1><h2 id="1-5-客户端与服务器连接的过程"><a href="#1-5-客户端与服务器连接的过程" class="headerlink" title="1.5 客户端与服务器连接的过程"></a>1.5 客户端与服务器连接的过程</h2><ul><li><h3 id="客户端进程和服务器进程在通信时采用下面几种方式"><a href="#客户端进程和服务器进程在通信时采用下面几种方式" class="headerlink" title="客户端进程和服务器进程在通信时采用下面几种方式"></a>客户端进程和服务器进程在通信时采用下面几种方式</h3><ul><li><h4 id="TCP-IP：客户端进程和服务器进程在不同的主机中。"><a href="#TCP-IP：客户端进程和服务器进程在不同的主机中。" class="headerlink" title="TCP/IP：客户端进程和服务器进程在不同的主机中。"></a>TCP/IP：客户端进程和服务器进程在不同的主机中。</h4></li><li><h4 id="命名管道或共享内存：得是Windows，而且需要在启动服务器和客户端时添加参数。使用共享内存进行通信需要在同一主机上。"><a href="#命名管道或共享内存：得是Windows，而且需要在启动服务器和客户端时添加参数。使用共享内存进行通信需要在同一主机上。" class="headerlink" title="命名管道或共享内存：得是Windows，而且需要在启动服务器和客户端时添加参数。使用共享内存进行通信需要在同一主机上。"></a>命名管道或共享内存：得是Windows，而且需要在启动服务器和客户端时添加参数。使用共享内存进行通信需要在同一主机上。</h4></li><li><h4 id="UNIX域套接字"><a href="#UNIX域套接字" class="headerlink" title="UNIX域套接字"></a>UNIX域套接字</h4></li></ul></li></ul><h2 id="1-6-服务器处理客户端请求过程"><a href="#1-6-服务器处理客户端请求过程" class="headerlink" title="1.6 服务器处理客户端请求过程"></a>1.6 服务器处理客户端请求过程</h2><ul><li><h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><ul><li><h4 id="当有一个客户端连接到服务端时，服务端进程会创建一个线程专门处理与这个客户端的交互。"><a href="#当有一个客户端连接到服务端时，服务端进程会创建一个线程专门处理与这个客户端的交互。" class="headerlink" title="当有一个客户端连接到服务端时，服务端进程会创建一个线程专门处理与这个客户端的交互。"></a>当有一个客户端连接到服务端时，服务端进程会创建一个线程专门处理与这个客户端的交互。</h4></li><li><h4 id="当客户端退出时，服务器不会立即销毁这个线程，而是缓存起来，当另一个新客户端连接进来时，把该线程分配给它。"><a href="#当客户端退出时，服务器不会立即销毁这个线程，而是缓存起来，当另一个新客户端连接进来时，把该线程分配给它。" class="headerlink" title="当客户端退出时，服务器不会立即销毁这个线程，而是缓存起来，当另一个新客户端连接进来时，把该线程分配给它。"></a>当客户端退出时，服务器不会立即销毁这个线程，而是缓存起来，当另一个新客户端连接进来时，把该线程分配给它。</h4></li><li><h4 id="如果客户端和服务器不在同一台计算机上，可以采用传输层安全性协议，对连接进行加密，保证数据传输的安全性。"><a href="#如果客户端和服务器不在同一台计算机上，可以采用传输层安全性协议，对连接进行加密，保证数据传输的安全性。" class="headerlink" title="如果客户端和服务器不在同一台计算机上，可以采用传输层安全性协议，对连接进行加密，保证数据传输的安全性。"></a>如果客户端和服务器不在同一台计算机上，可以采用传输层安全性协议，对连接进行加密，保证数据传输的安全性。</h4></li></ul></li><li><h3 id="解析与优化"><a href="#解析与优化" class="headerlink" title="解析与优化"></a>解析与优化</h3><ul><li><h4 id="查询缓存：会把刚刚处理过的查询请求与结果放在缓存上，下一次有同样的请求过来，就不用从底层的表中查询了。"><a href="#查询缓存：会把刚刚处理过的查询请求与结果放在缓存上，下一次有同样的请求过来，就不用从底层的表中查询了。" class="headerlink" title="查询缓存：会把刚刚处理过的查询请求与结果放在缓存上，下一次有同样的请求过来，就不用从底层的表中查询了。"></a>查询缓存：会把刚刚处理过的查询请求与结果放在缓存上，下一次有同样的请求过来，就不用从底层的表中查询了。</h4></li><li><h4 id="语法解析：服务器对语句进行分析，判断请求的语法是否正确，然后将查询到的表、各种查询条件放在服务器内部使用的一些数据结构上。"><a href="#语法解析：服务器对语句进行分析，判断请求的语法是否正确，然后将查询到的表、各种查询条件放在服务器内部使用的一些数据结构上。" class="headerlink" title="语法解析：服务器对语句进行分析，判断请求的语法是否正确，然后将查询到的表、各种查询条件放在服务器内部使用的一些数据结构上。"></a>语法解析：服务器对语句进行分析，判断请求的语法是否正确，然后将查询到的表、各种查询条件放在服务器内部使用的一些数据结构上。</h4></li><li><h4 id="查询优化：将外连接转换为内连接、表达式简化、子查询转换为连接等，优化的结果时生成执行计划，表明了应该使用哪些索引执行查询，以及表之间的连接顺序等等。"><a href="#查询优化：将外连接转换为内连接、表达式简化、子查询转换为连接等，优化的结果时生成执行计划，表明了应该使用哪些索引执行查询，以及表之间的连接顺序等等。" class="headerlink" title="查询优化：将外连接转换为内连接、表达式简化、子查询转换为连接等，优化的结果时生成执行计划，表明了应该使用哪些索引执行查询，以及表之间的连接顺序等等。"></a>查询优化：将外连接转换为内连接、表达式简化、子查询转换为连接等，优化的结果时生成执行计划，表明了应该使用哪些索引执行查询，以及表之间的连接顺序等等。</h4></li></ul></li><li><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ul><li><h4 id="功能：接收上层传下来的指令，然后对表中的数据进行读取或写入操作。"><a href="#功能：接收上层传下来的指令，然后对表中的数据进行读取或写入操作。" class="headerlink" title="功能：接收上层传下来的指令，然后对表中的数据进行读取或写入操作。"></a>功能：接收上层传下来的指令，然后对表中的数据进行读取或写入操作。</h4></li><li><h4 id="人们把请求过程分为server层和存储引擎层，只有存取真实数据的功能划分为存储引擎的功能。"><a href="#人们把请求过程分为server层和存储引擎层，只有存取真实数据的功能划分为存储引擎的功能。" class="headerlink" title="人们把请求过程分为server层和存储引擎层，只有存取真实数据的功能划分为存储引擎的功能。"></a>人们把请求过程分为server层和存储引擎层，只有存取真实数据的功能划分为存储引擎的功能。</h4></li><li><h4 id="server层在判断某条记录是否符合要求之后，其实是先发送到一个缓冲区，等缓冲区满了之后，才向客户端发送真正的记录。"><a href="#server层在判断某条记录是否符合要求之后，其实是先发送到一个缓冲区，等缓冲区满了之后，才向客户端发送真正的记录。" class="headerlink" title="server层在判断某条记录是否符合要求之后，其实是先发送到一个缓冲区，等缓冲区满了之后，才向客户端发送真正的记录。"></a>server层在判断某条记录是否符合要求之后，其实是先发送到一个缓冲区，等缓冲区满了之后，才向客户端发送真正的记录。</h4></li></ul></li></ul><h2 id="1-7-常用存储引擎"><a href="#1-7-常用存储引擎" class="headerlink" title="1.7 常用存储引擎"></a>1.7 常用存储引擎</h2><ul><li><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ul><li><h4 id="从MySQL5-5-5版本之后是默认存储引擎"><a href="#从MySQL5-5-5版本之后是默认存储引擎" class="headerlink" title="从MySQL5.5.5版本之后是默认存储引擎"></a>从MySQL5.5.5版本之后是默认存储引擎</h4></li></ul></li><li><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><ul><li><h4 id="之前是默认存储引擎"><a href="#之前是默认存储引擎" class="headerlink" title="之前是默认存储引擎"></a>之前是默认存储引擎</h4></li></ul></li><li><h3 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h3></li><li><h3 id="BLACKHOLE"><a href="#BLACKHOLE" class="headerlink" title="BLACKHOLE"></a>BLACKHOLE</h3></li><li><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3></li><li><h3 id="NDB"><a href="#NDB" class="headerlink" title="NDB"></a>NDB</h3></li><li><h3 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h3></li></ul><hr><h1 id="第2章-MySQL的调控按钮——启动选项和系统变量"><a href="#第2章-MySQL的调控按钮——启动选项和系统变量" class="headerlink" title="第2章 MySQL的调控按钮——启动选项和系统变量"></a>第2章 MySQL的调控按钮——启动选项和系统变量</h1><ul><li><h2 id="本章是一些调试和启动的初始配置，所以本章暂时略过，没做笔记。"><a href="#本章是一些调试和启动的初始配置，所以本章暂时略过，没做笔记。" class="headerlink" title="本章是一些调试和启动的初始配置，所以本章暂时略过，没做笔记。"></a>本章是一些调试和启动的初始配置，所以本章暂时略过，没做笔记。</h2></li></ul><hr><h1 id="第3章-字符集和比较规则"><a href="#第3章-字符集和比较规则" class="headerlink" title="第3章 字符集和比较规则"></a>第3章 字符集和比较规则</h1><h2 id="3-2-MySQL中支持的字符集和比较规则"><a href="#3-2-MySQL中支持的字符集和比较规则" class="headerlink" title="3.2 MySQL中支持的字符集和比较规则"></a>3.2 MySQL中支持的字符集和比较规则</h2><ul><li><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><h4 id="字符集：某个字符范围的编码规则"><a href="#字符集：某个字符范围的编码规则" class="headerlink" title="字符集：某个字符范围的编码规则"></a>字符集：某个字符范围的编码规则</h4></li><li><h4 id="比较规则：某个字符集中的字符比较大小或对某些字符串进行排序的一种规则"><a href="#比较规则：某个字符集中的字符比较大小或对某些字符串进行排序的一种规则" class="headerlink" title="比较规则：某个字符集中的字符比较大小或对某些字符串进行排序的一种规则"></a>比较规则：某个字符集中的字符比较大小或对某些字符串进行排序的一种规则</h4></li></ul></li><li><h3 id="MySQL中的utf8和utf8mb4"><a href="#MySQL中的utf8和utf8mb4" class="headerlink" title="MySQL中的utf8和utf8mb4"></a>MySQL中的utf8和utf8mb4</h3><ul><li><h4 id="utf8是utf8mb3的别名，是“阉割”的UTF-8字符集，使用1-3字节表示字符"><a href="#utf8是utf8mb3的别名，是“阉割”的UTF-8字符集，使用1-3字节表示字符" class="headerlink" title="utf8是utf8mb3的别名，是“阉割”的UTF-8字符集，使用1-3字节表示字符"></a>utf8是utf8mb3的别名，是“阉割”的UTF-8字符集，使用1-3字节表示字符</h4></li><li><h4 id="utf8mb4是正宗的UTF-8字符集，使用1-4字节表示字符，在MySQL-8-0中，已将其设为默认的字符集，5-7以及之前是latin1"><a href="#utf8mb4是正宗的UTF-8字符集，使用1-4字节表示字符，在MySQL-8-0中，已将其设为默认的字符集，5-7以及之前是latin1" class="headerlink" title="utf8mb4是正宗的UTF-8字符集，使用1-4字节表示字符，在MySQL 8.0中，已将其设为默认的字符集，5.7以及之前是latin1"></a>utf8mb4是正宗的UTF-8字符集，使用1-4字节表示字符，在MySQL 8.0中，已将其设为默认的字符集，5.7以及之前是latin1</h4></li></ul></li><li><h3 id="常见的字符集名称"><a href="#常见的字符集名称" class="headerlink" title="常见的字符集名称"></a>常见的字符集名称</h3><ul><li><table><thead><tr><th align="center">字符集名称</th><th align="center">Maxlen(最多需要几个字节表示一个字符)</th></tr></thead><tbody><tr><td align="center">ascii</td><td align="center">1</td></tr><tr><td align="center">latin1</td><td align="center">1</td></tr><tr><td align="center">gb2312</td><td align="center">2</td></tr><tr><td align="center">gbk</td><td align="center">2</td></tr><tr><td align="center">utf8</td><td align="center">3</td></tr><tr><td align="center">utf8mb4</td><td align="center">4</td></tr></tbody></table></li></ul></li></ul><h2 id="3-3-字符集和比较规则的应用"><a href="#3-3-字符集和比较规则的应用" class="headerlink" title="3.3 字符集和比较规则的应用"></a>3.3 字符集和比较规则的应用</h2><ul><li><h3 id="MySQL有4个级别的字符集和比较规则"><a href="#MySQL有4个级别的字符集和比较规则" class="headerlink" title="MySQL有4个级别的字符集和比较规则"></a>MySQL有4个级别的字符集和比较规则</h3><ul><li><h4 id="服务器级别"><a href="#服务器级别" class="headerlink" title="服务器级别"></a>服务器级别</h4></li><li><h4 id="数据库级别"><a href="#数据库级别" class="headerlink" title="数据库级别"></a>数据库级别</h4></li><li><h4 id="表级别"><a href="#表级别" class="headerlink" title="表级别"></a>表级别</h4></li><li><h4 id="列级别"><a href="#列级别" class="headerlink" title="列级别"></a>列级别</h4></li><li><h4 id="注意：如果哪个级别没有，就使用上层默认的字符集和比较规则"><a href="#注意：如果哪个级别没有，就使用上层默认的字符集和比较规则" class="headerlink" title="注意：如果哪个级别没有，就使用上层默认的字符集和比较规则"></a>注意：如果哪个级别没有，就使用上层默认的字符集和比较规则</h4></li></ul></li><li><h3 id="从发送请求到接收响应的过程中发生的字符集转换"><a href="#从发送请求到接收响应的过程中发生的字符集转换" class="headerlink" title="从发送请求到接收响应的过程中发生的字符集转换"></a>从发送请求到接收响应的过程中发生的字符集转换</h3><ul><li><h4 id="客户端发送的请求字节序列使用XXX字符集进行编码（取决于default-character-set）"><a href="#客户端发送的请求字节序列使用XXX字符集进行编码（取决于default-character-set）" class="headerlink" title="客户端发送的请求字节序列使用XXX字符集进行编码（取决于default-character-set）"></a>客户端发送的请求字节序列使用XXX字符集进行编码（取决于default-character-set）</h4></li><li><h4 id="服务器接收到请求字节序列后会认为它是采用XXX字符集进行编码（取决于character-set-client）"><a href="#服务器接收到请求字节序列后会认为它是采用XXX字符集进行编码（取决于character-set-client）" class="headerlink" title="服务器接收到请求字节序列后会认为它是采用XXX字符集进行编码（取决于character-set-client）"></a>服务器接收到请求字节序列后会认为它是采用XXX字符集进行编码（取决于character-set-client）</h4></li><li><h4 id="服务器在运行过程中，会把请求的字节序列转换为以XXX字符集编码的字节序列（取决于character-set-connection）"><a href="#服务器在运行过程中，会把请求的字节序列转换为以XXX字符集编码的字节序列（取决于character-set-connection）" class="headerlink" title="服务器在运行过程中，会把请求的字节序列转换为以XXX字符集编码的字节序列（取决于character-set-connection）"></a>服务器在运行过程中，会把请求的字节序列转换为以XXX字符集编码的字节序列（取决于character-set-connection）</h4></li><li><h4 id="服务器在向客户端返回字节序列时，采用XXX字符集进行编码（取决于character-set-results）"><a href="#服务器在向客户端返回字节序列时，采用XXX字符集进行编码（取决于character-set-results）" class="headerlink" title="服务器在向客户端返回字节序列时，采用XXX字符集进行编码（取决于character-set-results）"></a>服务器在向客户端返回字节序列时，采用XXX字符集进行编码（取决于character-set-results）</h4></li><li><h4 id="客户端在收到响应字节序列后，把它们写到黑框框中（取决于default-character-set）"><a href="#客户端在收到响应字节序列后，把它们写到黑框框中（取决于default-character-set）" class="headerlink" title="客户端在收到响应字节序列后，把它们写到黑框框中（取决于default-character-set）"></a>客户端在收到响应字节序列后，把它们写到黑框框中（取决于default-character-set）</h4></li></ul></li></ul><hr><h1 id="第4章-从一条记录说起——InnoDB记录存储结构"><a href="#第4章-从一条记录说起——InnoDB记录存储结构" class="headerlink" title="第4章 从一条记录说起——InnoDB记录存储结构"></a>第4章 从一条记录说起——InnoDB记录存储结构</h1><h2 id="4-2-InnoDB页介绍"><a href="#4-2-InnoDB页介绍" class="headerlink" title="4.2 InnoDB页介绍"></a>4.2 InnoDB页介绍</h2><ul><li><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li><h4 id="真正处理数据的过程发生在内存中，所以需要把磁盘中的数据加载到内存中"><a href="#真正处理数据的过程发生在内存中，所以需要把磁盘中的数据加载到内存中" class="headerlink" title="真正处理数据的过程发生在内存中，所以需要把磁盘中的数据加载到内存中"></a>真正处理数据的过程发生在内存中，所以需要把磁盘中的数据加载到内存中</h4></li><li><h4 id="如果是处理写入或修改请求，还需要把内存中的内容刷新到磁盘上"><a href="#如果是处理写入或修改请求，还需要把内存中的内容刷新到磁盘上" class="headerlink" title="如果是处理写入或修改请求，还需要把内存中的内容刷新到磁盘上"></a>如果是处理写入或修改请求，还需要把内存中的内容刷新到磁盘上</h4></li><li><h4 id="当我们想从表中获取某些记录时，InnoDB采取的方式是：将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位"><a href="#当我们想从表中获取某些记录时，InnoDB采取的方式是：将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位" class="headerlink" title="当我们想从表中获取某些记录时，InnoDB采取的方式是：将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位"></a>当我们想从表中获取某些记录时，InnoDB采取的方式是：将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位</h4></li><li><h4 id="页的大小一般为16KB"><a href="#页的大小一般为16KB" class="headerlink" title="页的大小一般为16KB"></a>页的大小一般为16KB</h4></li></ul></li></ul><h2 id="4-3-InnoDB行格式"><a href="#4-3-InnoDB行格式" class="headerlink" title="4.3 InnoDB行格式"></a>4.3 InnoDB行格式</h2><ul><li><h3 id="4种行格式："><a href="#4种行格式：" class="headerlink" title="4种行格式："></a>4种行格式：</h3><ul><li><h4 id="COMPACT"><a href="#COMPACT" class="headerlink" title="COMPACT"></a>COMPACT</h4></li><li><h4 id="REDUNDANT"><a href="#REDUNDANT" class="headerlink" title="REDUNDANT"></a>REDUNDANT</h4></li><li><h4 id="DYNAMIC"><a href="#DYNAMIC" class="headerlink" title="DYNAMIC"></a>DYNAMIC</h4></li><li><h4 id="COMPRESSED"><a href="#COMPRESSED" class="headerlink" title="COMPRESSED"></a>COMPRESSED</h4></li></ul></li></ul><ul><li><h3 id="COMPACT行格式"><a href="#COMPACT行格式" class="headerlink" title="COMPACT行格式"></a>COMPACT行格式</h3><ul><li><h4 id="一条完整的记录分为记录的额外信息和记录的真实数据"><a href="#一条完整的记录分为记录的额外信息和记录的真实数据" class="headerlink" title="一条完整的记录分为记录的额外信息和记录的真实数据"></a>一条完整的记录分为记录的额外信息和记录的真实数据</h4></li><li><h4 id="记录的额外信息"><a href="#记录的额外信息" class="headerlink" title="记录的额外信息"></a>记录的额外信息</h4><ul><li><h5 id="变长字段长度列表"><a href="#变长字段长度列表" class="headerlink" title="变长字段长度列表"></a>变长字段长度列表</h5><ul><li>变长字段占用存储空间分为两部分：真正的数据内容、该数据占用的字节数</li><li>各变长字段的真是数据占用的字节数按照列的顺序逆序存放</li><li>InnoDB在读取记录的变长字段长度列表时先查看表结构</li></ul></li><li><h5 id="NULL值列表"><a href="#NULL值列表" class="headerlink" title="NULL值列表"></a>NULL值列表</h5><ul><li>如果表中没有允许NULL值得列，那么不存在</li><li>否则将每个允许存储NULL的列对应一个二进制位，二进制位按照列的顺序逆序排列</li></ul></li><li><h5 id="记录头信息"><a href="#记录头信息" class="headerlink" title="记录头信息"></a>记录头信息</h5><ul><li>由固定的5字节组成，用于描述记录的一些属性</li></ul></li></ul></li><li><h4 id="记录的真实数据"><a href="#记录的真实数据" class="headerlink" title="记录的真实数据"></a>记录的真实数据</h4><ul><li><h5 id="除了自己定义的列的数据以外，还有隐藏列"><a href="#除了自己定义的列的数据以外，还有隐藏列" class="headerlink" title="除了自己定义的列的数据以外，还有隐藏列"></a>除了自己定义的列的数据以外，还有隐藏列</h5><ul><li><table><thead><tr><th align="center">列名</th><th align="center">是否必需</th><th align="center">占用空间</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">DB_ROW_ID</td><td align="center">否</td><td align="center">6字节</td><td align="center">行ID，唯一标识一条记录</td></tr><tr><td align="center">DB_TRX_ID</td><td align="center">是</td><td align="center">6字节</td><td align="center">事务ID</td></tr><tr><td align="center">DB_ROLL_PTR</td><td align="center">是</td><td align="center">7字节</td><td align="center">回滚指针</td></tr></tbody></table></li></ul></li><li><h5 id="InnoDB的主键生成策略：1、优先用户自定义，2、选取一个不允许NULL值的UNIQUE键，3、添加并使用DB-ROW-ID"><a href="#InnoDB的主键生成策略：1、优先用户自定义，2、选取一个不允许NULL值的UNIQUE键，3、添加并使用DB-ROW-ID" class="headerlink" title="InnoDB的主键生成策略：1、优先用户自定义，2、选取一个不允许NULL值的UNIQUE键，3、添加并使用DB_ROW_ID"></a>InnoDB的主键生成策略：1、优先用户自定义，2、选取一个不允许NULL值的UNIQUE键，3、添加并使用DB_ROW_ID</h5></li></ul></li></ul></li><li><h3 id="REDUNDANT行格式"><a href="#REDUNDANT行格式" class="headerlink" title="REDUNDANT行格式"></a>REDUNDANT行格式</h3><ul><li><h4 id="一条完整的记录分为记录的额外信息和记录的真实数据-1"><a href="#一条完整的记录分为记录的额外信息和记录的真实数据-1" class="headerlink" title="一条完整的记录分为记录的额外信息和记录的真实数据"></a>一条完整的记录分为记录的额外信息和记录的真实数据</h4></li><li><h4 id="记录的额外信息-1"><a href="#记录的额外信息-1" class="headerlink" title="记录的额外信息"></a>记录的额外信息</h4><ul><li><h5 id="字段长度偏移列表"><a href="#字段长度偏移列表" class="headerlink" title="字段长度偏移列表"></a>字段长度偏移列表</h5></li><li><h5 id="记录头信息-1"><a href="#记录头信息-1" class="headerlink" title="记录头信息"></a>记录头信息</h5></li></ul></li></ul></li></ul><ul><li><h3 id="DYNAMIC和COMPRESSED行格式"><a href="#DYNAMIC和COMPRESSED行格式" class="headerlink" title="DYNAMIC和COMPRESSED行格式"></a>DYNAMIC和COMPRESSED行格式</h3><ul><li><h4 id="REDUNDANT是比较原始的，非紧凑，而剩余三个是较为新的，是紧凑的（占用存储空间更少）"><a href="#REDUNDANT是比较原始的，非紧凑，而剩余三个是较为新的，是紧凑的（占用存储空间更少）" class="headerlink" title="REDUNDANT是比较原始的，非紧凑，而剩余三个是较为新的，是紧凑的（占用存储空间更少）"></a>REDUNDANT是比较原始的，非紧凑，而剩余三个是较为新的，是紧凑的（占用存储空间更少）</h4></li><li><h4 id="这两种行格式类似于COMPACT，只不过在处理溢出列数据时有点差异：它们不会在记录的真实数据处存储列真实数据的前768字节，而是把所有的数据都存储到所谓的溢出页中，只在记录的真实数据处存储指向这些溢出页的地址"><a href="#这两种行格式类似于COMPACT，只不过在处理溢出列数据时有点差异：它们不会在记录的真实数据处存储列真实数据的前768字节，而是把所有的数据都存储到所谓的溢出页中，只在记录的真实数据处存储指向这些溢出页的地址" class="headerlink" title="这两种行格式类似于COMPACT，只不过在处理溢出列数据时有点差异：它们不会在记录的真实数据处存储列真实数据的前768字节，而是把所有的数据都存储到所谓的溢出页中，只在记录的真实数据处存储指向这些溢出页的地址"></a>这两种行格式类似于COMPACT，只不过在处理溢出列数据时有点差异：它们不会在记录的真实数据处存储列真实数据的前768字节，而是把所有的数据都存储到所谓的溢出页中，只在记录的真实数据处存储指向这些溢出页的地址</h4></li><li><h4 id="另外COMPRESSED行格式会采用压缩算法对页面进行压缩"><a href="#另外COMPRESSED行格式会采用压缩算法对页面进行压缩" class="headerlink" title="另外COMPRESSED行格式会采用压缩算法对页面进行压缩"></a>另外COMPRESSED行格式会采用压缩算法对页面进行压缩</h4></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端开发技术面面经（持续更新中...）</title>
      <link href="/2021/053110342.html"/>
      <url>/2021/053110342.html</url>
      
        <content type="html"><![CDATA[<h1 id="岗位-python-web开发"><a href="#岗位-python-web开发" class="headerlink" title="岗位:python web开发"></a>岗位:python web开发</h1><ul><li><h4 id="状态-已offer"><a href="#状态-已offer" class="headerlink" title="状态:已offer"></a>状态:已offer</h4></li><li><h4 id="流程-一轮技术面"><a href="#流程-一轮技术面" class="headerlink" title="流程:一轮技术面"></a>流程:一轮技术面</h4></li><li><h4 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h4><ul><li><pre class=" language-python"><code class="language-python">学python多久了？学习过程中遇到的最大困难是什么？python3有多继承吗？python2和python3有什么区别，列举几点？简单描述下静态方法和类方法django了解多少？sql用的熟练吗？inner join是什么？自连接和外连接哪个效率高？了解过爬虫吗？写一个正则，匹配<span class="token number">11</span>位手机号用过非关系数据库吗？redis或者mongodb之类的？能实习多久？</code></pre></li></ul></li></ul><hr><h1 id="岗位-python开发"><a href="#岗位-python开发" class="headerlink" title="岗位:python开发"></a>岗位:python开发</h1><ul><li><h4 id="状态-已offer-1"><a href="#状态-已offer-1" class="headerlink" title="状态:已offer"></a>状态:已offer</h4></li><li><h4 id="流程-一轮技术面-1"><a href="#流程-一轮技术面-1" class="headerlink" title="流程:一轮技术面"></a>流程:一轮技术面</h4></li><li><h4 id="面试题目-1"><a href="#面试题目-1" class="headerlink" title="面试题目"></a>面试题目</h4><ul><li><pre class=" language-python"><code class="language-python">python的字典底层是怎么实现的？两道编程题：<span class="token number">1</span><span class="token punctuation">.</span> 假设数组nums只有 一个重复的整数 ，找出这个重复的数 。<span class="token number">2</span><span class="token punctuation">.</span> 给定一个数组 nums，编写一个函数将所有 <span class="token number">0</span> 移动到数组的末尾，同时保持非零元素的相对顺序随便设计一个包含外键的数据库，口述表的结构sql题：有两张表，查询学生id为<span class="token number">3</span>的平均成绩会django的orm吗，用orm写一下这道sql题后端是如何发送数据给前端的，具体是怎么实现的，讲底层原理你的项目有部署吗，有了解过docker吗</code></pre></li></ul></li></ul><hr><h1 id="岗位-python开发兼助教"><a href="#岗位-python开发兼助教" class="headerlink" title="岗位:python开发兼助教"></a>岗位:python开发兼助教</h1><ul><li><h4 id="状态-已offer-2"><a href="#状态-已offer-2" class="headerlink" title="状态:已offer"></a>状态:已offer</h4></li><li><h4 id="流程-笔试-一轮技术面-hr面"><a href="#流程-笔试-一轮技术面-hr面" class="headerlink" title="流程:笔试+一轮技术面+hr面"></a>流程:笔试+一轮技术面+hr面</h4></li><li><h4 id="面试题目-2"><a href="#面试题目-2" class="headerlink" title="面试题目"></a>面试题目</h4><ul><li><pre class=" language-python"><code class="language-python">五道编程题：<span class="token number">1</span><span class="token punctuation">.</span>异常处理<span class="token number">2</span><span class="token punctuation">.</span>判断闰年<span class="token number">3</span><span class="token punctuation">.</span>格式化输出<span class="token number">4</span><span class="token punctuation">.</span>大小写转换<span class="token number">5</span><span class="token punctuation">.</span>设计一个不带参装饰器，计算运行时间</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器</title>
      <link href="/2021/040138966.html"/>
      <url>/2021/040138966.html</url>
      
        <content type="html"><![CDATA[<hr><hr><h1 id="无参装饰器"><a href="#无参装饰器" class="headerlink" title="无参装饰器"></a>无参装饰器</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">outter</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token keyword">return</span> wrapper@outter<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"it's over %s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'ok'</span><span class="token comment" spellcheck="true"># index = outter(index)</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span>ret <span class="token operator">=</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span></code></pre></li></ul><h1 id="有参装饰器"><a href="#有参装饰器" class="headerlink" title="有参装饰器"></a>有参装饰器</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token triple-quoted-string string">'''  @author: saltfish  @contact: 17681861018  @file.txt: 01 带参数装饰器.py  @time: 2020/12/20 12:36 '''</span><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>from_add<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> from_add <span class="token operator">==</span> <span class="token string">'file.txt'</span> <span class="token operator">and</span> name <span class="token operator">==</span> <span class="token string">'xy'</span> <span class="token operator">and</span> password <span class="token operator">==</span> <span class="token number">1018</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功,源于文件"</span><span class="token punctuation">)</span>                ret <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>                <span class="token keyword">return</span> ret            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登陆失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> f    <span class="token keyword">return</span> wrapper@auth<span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'&amp;#123;name&amp;#125;通过用&amp;#123;password&amp;#125;登录成功'</span><span class="token punctuation">)</span>test1<span class="token punctuation">(</span><span class="token string">'xy'</span><span class="token punctuation">,</span> <span class="token number">1018</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> 高阶部分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手敲部分排序算法</title>
      <link href="/2020/090764845.html"/>
      <url>/2020/090764845.html</url>
      
        <content type="html"><![CDATA[<hr><ul><li><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>l1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>l1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    min_index <span class="token operator">=</span> i    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> l1<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>            min_index <span class="token operator">=</span> j    <span class="token keyword">if</span> min_index <span class="token operator">!=</span> i<span class="token punctuation">:</span>      l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> l1<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>li_len <span class="token operator">=</span> len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> li_len<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> l1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">:</span>            l1<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        l1<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> low    j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid <span class="token operator">and</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        <span class="token keyword">if</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    l1<span class="token punctuation">[</span>low<span class="token punctuation">:</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        merge_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>        merge_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span>        merge<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>merge_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token operator">and</span> l1<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> temp<span class="token punctuation">:</span>            right <span class="token operator">-=</span> <span class="token number">1</span>        l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>right<span class="token punctuation">]</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token operator">and</span> l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">:</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        l1<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> temp    <span class="token keyword">return</span> left<span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token number">-1</span><span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>quick_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
