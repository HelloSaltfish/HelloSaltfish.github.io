<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SaltFish</title>
  
  <subtitle>咸鱼的梦想就是不当咸鱼</subtitle>
  <link href="https://hellosaltfish.github.io/atom.xml" rel="self"/>
  
  <link href="https://hellosaltfish.github.io/"/>
  <updated>2021-08-03T15:29:53.175Z</updated>
  <id>https://hellosaltfish.github.io/</id>
  
  <author>
    <name>SaltFish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《MySQL是怎样运行的》阅读笔记</title>
    <link href="https://hellosaltfish.github.io/2021/06035534.html"/>
    <id>https://hellosaltfish.github.io/2021/06035534.html</id>
    <published>2021-06-03T13:15:10.000Z</published>
    <updated>2021-08-03T15:29:53.175Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h1 id="第1章-装作自己是个小白——初识MySQL"><a href="#第1章-装作自己是个小白——初识MySQL" class="headerlink" title="第1章 装作自己是个小白——初识MySQL"></a>第1章 装作自己是个小白——初识MySQL</h1><h2 id="1-5-客户端与服务器连接的过程"><a href="#1-5-客户端与服务器连接的过程" class="headerlink" title="1.5 客户端与服务器连接的过程"></a>1.5 客户端与服务器连接的过程</h2><ul><li><h3 id="客户端进程和服务器进程在通信时采用下面几种方式"><a href="#客户端进程和服务器进程在通信时采用下面几种方式" class="headerlink" title="客户端进程和服务器进程在通信时采用下面几种方式"></a>客户端进程和服务器进程在通信时采用下面几种方式</h3><ul><li>TCP/IP：客户端进程和服务器进程在不同的主机中。</li><li>命名管道或共享内存：得是Windows，而且需要在启动服务器和客户端时添加参数。使用共享内存进行通信需要在同一主机上。</li><li>UNIX域套接字</li></ul></li></ul><h2 id="1-6-服务器处理客户端请求过程"><a href="#1-6-服务器处理客户端请求过程" class="headerlink" title="1.6 服务器处理客户端请求过程"></a>1.6 服务器处理客户端请求过程</h2><ul><li><h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><ul><li>当有一个客户端连接到服务端时，服务端进程会创建一个线程专门处理与这个客户端的交互。</li><li>当客户端退出时，服务器不会立即销毁这个线程，而是缓存起来，当另一个新客户端连接进来时，把该线程分配给它。</li><li>如果客户端和服务器不在同一台计算机上，可以采用传输层安全性协议，对连接进行加密，保证数据传输的安全性。</li></ul></li><li><h3 id="解析与优化"><a href="#解析与优化" class="headerlink" title="解析与优化"></a>解析与优化</h3><ul><li>查询缓存：会把刚刚处理过的查询请求与结果放在缓存上，下一次有同样的请求过来，就不用从底层的表中查询了。</li><li>语法解析：服务器对语句进行分析，判断请求的语法是否正确，然后将查询到的表、各种查询条件放在服务器内部使用的一些数据结构上。</li><li>查询优化：将外连接转换为内连接、表达式简化、子查询转换为连接等，优化的结果时生成执行计划，表明了应该使用哪些索引执行查询，以及表之间的连接顺序等等。</li></ul></li><li><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ul><li>功能：接收上层传下来的指令，然后对表中的数据进行读取或写入操作。</li><li>人们把请求过程分为server层和存储引擎层，只有存取真实数据的功能划分为存储引擎的功能。</li><li>server层在判断某条记录是否符合要求之后，其实是先发送到一个缓冲区，等缓冲区满了之后，才向客户端发送真正的记录。</li></ul></li></ul><h2 id="1-7-常用存储引擎"><a href="#1-7-常用存储引擎" class="headerlink" title="1.7 常用存储引擎"></a>1.7 常用存储引擎</h2><ul><li>InnoDB<ul><li>从MySQL5.5.5版本之后是默认存储引擎</li></ul></li><li>MyISAM<ul><li>之前是默认存储引擎</li></ul></li><li>MEMORY</li><li>BLACKHOLE</li><li>CSV</li><li>NDB</li><li>MERGE</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;第1章-装作自己是个小白——初识MySQL&quot;&gt;&lt;a href=&quot;#第1章-装作自己是个小白——初识MySQL&quot; class=&quot;headerlink&quot; title=&quot;第1章 装作自己是个小白——初识MySQL&quot;&gt;&lt;/a&gt;第1章 装作自己是个小白—</summary>
      
    
    
    
    <category term="数据库" scheme="https://hellosaltfish.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://hellosaltfish.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>后端开发技术面面经（持续更新中...）</title>
    <link href="https://hellosaltfish.github.io/2021/053110342.html"/>
    <id>https://hellosaltfish.github.io/2021/053110342.html</id>
    <published>2021-05-31T04:16:34.000Z</published>
    <updated>2021-08-03T15:31:18.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="岗位-python-web开发"><a href="#岗位-python-web开发" class="headerlink" title="岗位:python web开发"></a>岗位:python web开发</h1><ul><li><h4 id="状态-已offer"><a href="#状态-已offer" class="headerlink" title="状态:已offer"></a>状态:已offer</h4></li><li><h4 id="流程-一轮技术面"><a href="#流程-一轮技术面" class="headerlink" title="流程:一轮技术面"></a>流程:一轮技术面</h4></li><li><h4 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h4><ul><li><pre class=" language-python"><code class="language-python">学python多久了？学习过程中遇到的最大困难是什么？python3有多继承吗？python2和python3有什么区别，列举几点？简单描述下静态方法和类方法django了解多少？sql用的熟练吗？inner join是什么？自连接和外连接哪个效率高？了解过爬虫吗？写一个正则，匹配<span class="token number">11</span>位手机号用过非关系数据库吗？redis或者mongodb之类的？能实习多久？</code></pre></li></ul></li></ul><hr><h1 id="岗位-python开发"><a href="#岗位-python开发" class="headerlink" title="岗位:python开发"></a>岗位:python开发</h1><ul><li><h4 id="状态-已offer-1"><a href="#状态-已offer-1" class="headerlink" title="状态:已offer"></a>状态:已offer</h4></li><li><h4 id="流程-一轮技术面-1"><a href="#流程-一轮技术面-1" class="headerlink" title="流程:一轮技术面"></a>流程:一轮技术面</h4></li><li><h4 id="面试题目-1"><a href="#面试题目-1" class="headerlink" title="面试题目"></a>面试题目</h4><ul><li><pre class=" language-python"><code class="language-python">python的字典底层是怎么实现的？两道编程题：<span class="token number">1</span><span class="token punctuation">.</span> 假设数组nums只有 一个重复的整数 ，找出这个重复的数 。<span class="token number">2</span><span class="token punctuation">.</span> 给定一个数组 nums，编写一个函数将所有 <span class="token number">0</span> 移动到数组的末尾，同时保持非零元素的相对顺序随便设计一个包含外键的数据库，口述表的结构sql题：有两张表，查询学生id为<span class="token number">3</span>的平均成绩会django的orm吗，用orm写一下这道sql题后端是如何发送数据给前端的，具体是怎么实现的，讲底层原理你的项目有部署吗，有了解过docker吗</code></pre></li></ul></li></ul><hr><h1 id="岗位-python开发兼助教"><a href="#岗位-python开发兼助教" class="headerlink" title="岗位:python开发兼助教"></a>岗位:python开发兼助教</h1><ul><li><h4 id="状态-已offer-2"><a href="#状态-已offer-2" class="headerlink" title="状态:已offer"></a>状态:已offer</h4></li><li><h4 id="流程-笔试-一轮技术面-hr面"><a href="#流程-笔试-一轮技术面-hr面" class="headerlink" title="流程:笔试+一轮技术面+hr面"></a>流程:笔试+一轮技术面+hr面</h4></li><li><h4 id="面试题目-2"><a href="#面试题目-2" class="headerlink" title="面试题目"></a>面试题目</h4><ul><li><pre class=" language-python"><code class="language-python">五道编程题：<span class="token number">1</span><span class="token punctuation">.</span>异常处理<span class="token number">2</span><span class="token punctuation">.</span>判断闰年<span class="token number">3</span><span class="token punctuation">.</span>格式化输出<span class="token number">4</span><span class="token punctuation">.</span>大小写转换<span class="token number">5</span><span class="token punctuation">.</span>设计一个不带参装饰器，计算运行时间</code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;岗位-python-web开发&quot;&gt;&lt;a href=&quot;#岗位-python-web开发&quot; class=&quot;headerlink&quot; title=&quot;岗位:python web开发&quot;&gt;&lt;/a&gt;岗位:python web开发&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;状态-已</summary>
      
    
    
    
    <category term="开发面试" scheme="https://hellosaltfish.github.io/categories/%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面经" scheme="https://hellosaltfish.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>装饰器</title>
    <link href="https://hellosaltfish.github.io/2021/040138966.html"/>
    <id>https://hellosaltfish.github.io/2021/040138966.html</id>
    <published>2021-04-01T07:03:45.000Z</published>
    <updated>2021-08-03T15:30:44.203Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h1 id="无参装饰器"><a href="#无参装饰器" class="headerlink" title="无参装饰器"></a>无参装饰器</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">outter</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token keyword">return</span> wrapper@outter<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"it's over %s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'ok'</span><span class="token comment" spellcheck="true"># index = outter(index)</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span>ret <span class="token operator">=</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span></code></pre></li></ul><h1 id="有参装饰器"><a href="#有参装饰器" class="headerlink" title="有参装饰器"></a>有参装饰器</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token triple-quoted-string string">'''  @author: saltfish  @contact: 17681861018  @file.txt: 01 带参数装饰器.py  @time: 2020/12/20 12:36 '''</span><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>from_add<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> from_add <span class="token operator">==</span> <span class="token string">'file.txt'</span> <span class="token operator">and</span> name <span class="token operator">==</span> <span class="token string">'xy'</span> <span class="token operator">and</span> password <span class="token operator">==</span> <span class="token number">1018</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功,源于文件"</span><span class="token punctuation">)</span>                ret <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>                <span class="token keyword">return</span> ret            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登陆失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> f    <span class="token keyword">return</span> wrapper@auth<span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'&amp;#123;name&amp;#125;通过用&amp;#123;password&amp;#125;登录成功'</span><span class="token punctuation">)</span>test1<span class="token punctuation">(</span><span class="token string">'xy'</span><span class="token punctuation">,</span> <span class="token number">1018</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;无参装饰器&quot;&gt;&lt;a href=&quot;#无参装饰器&quot; class=&quot;headerlink&quot; title=&quot;无参装饰器&quot;&gt;&lt;/a&gt;无参装饰器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=</summary>
      
    
    
    
    <category term="Python" scheme="https://hellosaltfish.github.io/categories/Python/"/>
    
    
    <category term="语法" scheme="https://hellosaltfish.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
    <category term="高阶部分" scheme="https://hellosaltfish.github.io/tags/%E9%AB%98%E9%98%B6%E9%83%A8%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>手敲部分排序算法</title>
    <link href="https://hellosaltfish.github.io/2020/090764845.html"/>
    <id>https://hellosaltfish.github.io/2020/090764845.html</id>
    <published>2020-09-06T23:25:23.000Z</published>
    <updated>2021-08-03T15:30:32.750Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>l1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>l1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    min_index <span class="token operator">=</span> i    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> l1<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>            min_index <span class="token operator">=</span> j    <span class="token keyword">if</span> min_index <span class="token operator">!=</span> i<span class="token punctuation">:</span>      l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> l1<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>li_len <span class="token operator">=</span> len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> li_len<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> l1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">:</span>            l1<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        l1<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> low    j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid <span class="token operator">and</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        <span class="token keyword">if</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    l1<span class="token punctuation">[</span>low<span class="token punctuation">:</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        merge_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>        merge_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span>        merge<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>merge_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token operator">and</span> l1<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> temp<span class="token punctuation">:</span>            right <span class="token operator">-=</span> <span class="token number">1</span>        l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>right<span class="token punctuation">]</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token operator">and</span> l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">:</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        l1<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> temp    <span class="token keyword">return</span> left<span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token number">-1</span><span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>quick_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=</summary>
      
    
    
    
    <category term="Python" scheme="https://hellosaltfish.github.io/categories/Python/"/>
    
    
    <category term="排序算法" scheme="https://hellosaltfish.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="语法" scheme="https://hellosaltfish.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
