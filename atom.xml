<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SaltFish</title>
  
  <subtitle>SaltFish个人博客</subtitle>
  <link href="https://hellosaltfish.github.io/atom.xml" rel="self"/>
  
  <link href="https://hellosaltfish.github.io/"/>
  <updated>2021-09-24T15:06:06.198Z</updated>
  <id>https://hellosaltfish.github.io/</id>
  
  <author>
    <name>SaltFish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计网笔记</title>
    <link href="https://hellosaltfish.github.io/2021/092417393.html"/>
    <id>https://hellosaltfish.github.io/2021/092417393.html</id>
    <published>2021-09-24T14:16:04.479Z</published>
    <updated>2021-09-24T15:06:06.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>解决在各种传输媒体上传输比特0和1的问题,进而给数据链路层提供透明传输比特流的服务</li></ul><h2 id="物理层协议的主要功能"><a href="#物理层协议的主要功能" class="headerlink" title="物理层协议的主要功能"></a>物理层协议的主要功能</h2><ul><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>过程特性</li></ul><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><ul><li>串行传输</li><li>并行传输</li><li>同步传输</li><li>异步传输</li><li>单攻通信</li><li>半双工通信</li><li>全双工通信</li></ul><h2 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h2><ul><li>不归零编码<ul><li>存在同步问题</li></ul></li><li>归零编码<ul><li>优点是自同步</li><li>缺点是编码效率低</li></ul></li><li>曼彻斯特编码<ul><li>传统以太网使用的就是这个编码</li><li>如:正跳变表示比特0,负跳变表示比特1</li><li>码元中间时刻的跳变既表示时钟,又表示数据</li></ul></li><li>差分曼彻斯特编码<ul><li>跳变仅表示时钟</li><li>码元开始处是否发生变化表示比特0或1</li></ul></li></ul><h2 id="基本调制方法"><a href="#基本调制方法" class="headerlink" title="基本调制方法"></a>基本调制方法</h2><ul><li>调幅</li><li>调频</li><li>调相</li></ul><h2 id="输出信号波形失真因素"><a href="#输出信号波形失真因素" class="headerlink" title="输出信号波形失真因素"></a>输出信号波形失真因素</h2><ul><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传输媒体质量</li></ul><h2 id="奈氏准则"><a href="#奈氏准则" class="headerlink" title="奈氏准则"></a>奈氏准则</h2><ul><li>在假定的理想条件下,为了避免码间串扰,码元传输速率是有上限的</li><li>理想低通信道额最高码元传输速率:2W Baud =2W 码元/秒</li><li>理想低通信道额最高码元传输速率:W Baud =W 码元/秒   W:信道带宽 Buad:波特</li></ul><h2 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h2><ul><li>c=W×log2(1+S/N) (单位:bit/s)</li><li>c:信道的极限信息传输速率(b/s)</li><li>S:信道内所传信号的平均功率</li><li>N:信道内的高斯噪声功率</li><li>S/N:信噪比,使用分贝为度量单位 信噪比(dB)=10×log10(S/N)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;物理层&quot;&gt;&lt;a href=&quot;#物理层&quot; class=&quot;headerlink&quot; title=&quot;物理层&quot;&gt;&lt;/a&gt;物理层&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://hellosaltfish.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计网" scheme="https://hellosaltfish.github.io/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://hellosaltfish.github.io/2021/080946132.html"/>
    <id>https://hellosaltfish.github.io/2021/080946132.html</id>
    <published>2021-08-09T13:18:22.000Z</published>
    <updated>2021-08-09T13:21:32.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用元类"><a href="#利用元类" class="headerlink" title="利用元类"></a>利用元类</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">singe</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">'_instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance<span class="token keyword">class</span> <span class="token class-name">mycls</span><span class="token punctuation">(</span>singe<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> aa <span class="token operator">=</span> mycls<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>b <span class="token operator">=</span> mycls<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>a<span class="token punctuation">,</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>a<span class="token punctuation">,</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;利用元类&quot;&gt;&lt;a href=&quot;#利用元类&quot; class=&quot;headerlink&quot; title=&quot;利用元类&quot;&gt;&lt;/a&gt;利用元类&lt;/h1&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span</summary>
      
    
    
    
    <category term="Python" scheme="https://hellosaltfish.github.io/categories/Python/"/>
    
    
    <category term="高阶部分" scheme="https://hellosaltfish.github.io/tags/%E9%AB%98%E9%98%B6%E9%83%A8%E5%88%86/"/>
    
    <category term="语法" scheme="https://hellosaltfish.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Personal</title>
    <link href="https://hellosaltfish.github.io/2021/080822378.html"/>
    <id>https://hellosaltfish.github.io/2021/080822378.html</id>
    <published>2021-08-08T14:14:43.000Z</published>
    <updated>2021-08-08T15:25:36.027Z</updated>
    
    
    
    
    <category term="Personal" scheme="https://hellosaltfish.github.io/categories/Personal/"/>
    
    
    <category term="Personal" scheme="https://hellosaltfish.github.io/tags/Personal/"/>
    
  </entry>
  
  <entry>
    <title>《MySQL是怎样运行的》阅读笔记</title>
    <link href="https://hellosaltfish.github.io/2021/06035534.html"/>
    <id>https://hellosaltfish.github.io/2021/06035534.html</id>
    <published>2021-06-03T13:15:10.000Z</published>
    <updated>2021-08-09T03:27:38.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-装作自己是个小白——初识MySQL"><a href="#第1章-装作自己是个小白——初识MySQL" class="headerlink" title="第1章 装作自己是个小白——初识MySQL"></a>第1章 装作自己是个小白——初识MySQL</h1><h2 id="1-5-客户端与服务器连接的过程"><a href="#1-5-客户端与服务器连接的过程" class="headerlink" title="1.5 客户端与服务器连接的过程"></a>1.5 客户端与服务器连接的过程</h2><h3 id="客户端进程和服务器进程在通信时采用下面几种方式"><a href="#客户端进程和服务器进程在通信时采用下面几种方式" class="headerlink" title="客户端进程和服务器进程在通信时采用下面几种方式"></a>客户端进程和服务器进程在通信时采用下面几种方式</h3><ul><li>TCP/IP：客户端进程和服务器进程在不同的主机中。</li><li>命名管道或共享内存：得是Windows，而且需要在启动服务器和客户端时添加参数。使用共享内存进行通信需要在同一主机上。</li><li>UNIX域套接字</li></ul><h2 id="1-6-服务器处理客户端请求过程"><a href="#1-6-服务器处理客户端请求过程" class="headerlink" title="1.6 服务器处理客户端请求过程"></a>1.6 服务器处理客户端请求过程</h2><h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><ul><li>当有一个客户端连接到服务端时，服务端进程会创建一个线程专门处理与这个客户端的交互。</li><li>当客户端退出时，服务器不会立即销毁这个线程，而是缓存起来，当另一个新客户端连接进来时，把该线程分配给它。</li><li>如果客户端和服务器不在同一台计算机上，可以采用传输层安全性协议，对连接进行加密，保证数据传输的安全性。</li></ul><h3 id="解析与优化"><a href="#解析与优化" class="headerlink" title="解析与优化"></a>解析与优化</h3><ul><li>查询缓存：会把刚刚处理过的查询请求与结果放在缓存上，下一次有同样的请求过来，就不用从底层的表中查询了。</li><li>语法解析：服务器对语句进行分析，判断请求的语法是否正确，然后将查询到的表、各种查询条件放在服务器内部使用的一些数据结构上。</li><li>查询优化：将外连接转换为内连接、表达式简化、子查询转换为连接等，优化的结果时生成执行计划，表明了应该使用哪些索引执行查询，以及表之间的连接顺序等等。</li></ul><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ul><li>功能：接收上层传下来的指令，然后对表中的数据进行读取或写入操作。</li><li>人们把请求过程分为server层和存储引擎层，只有存取真实数据的功能划分为存储引擎的功能。</li><li>server层在判断某条记录是否符合要求之后，其实是先发送到一个缓冲区，等缓冲区满了之后，才向客户端发送真正的记录。</li></ul><h2 id="1-7-常用存储引擎"><a href="#1-7-常用存储引擎" class="headerlink" title="1.7 常用存储引擎"></a>1.7 常用存储引擎</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ul><li>从MySQL5.5.5版本之后是默认存储引擎</li></ul><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><ul><li>之前是默认存储引擎</li></ul><h3 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h3><h3 id="BLACKHOLE"><a href="#BLACKHOLE" class="headerlink" title="BLACKHOLE"></a>BLACKHOLE</h3><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><h3 id="NDB"><a href="#NDB" class="headerlink" title="NDB"></a>NDB</h3><h3 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h3><hr><h1 id="第2章-MySQL的调控按钮——启动选项和系统变量"><a href="#第2章-MySQL的调控按钮——启动选项和系统变量" class="headerlink" title="第2章 MySQL的调控按钮——启动选项和系统变量"></a>第2章 MySQL的调控按钮——启动选项和系统变量</h1><p>本章是一些调试和启动的初始配置，所以本章暂时略过，没做笔记。</p><hr><h1 id="第3章-字符集和比较规则"><a href="#第3章-字符集和比较规则" class="headerlink" title="第3章 字符集和比较规则"></a>第3章 字符集和比较规则</h1><h2 id="3-2-MySQL中支持的字符集和比较规则"><a href="#3-2-MySQL中支持的字符集和比较规则" class="headerlink" title="3.2 MySQL中支持的字符集和比较规则"></a>3.2 MySQL中支持的字符集和比较规则</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>字符集：某个字符范围的编码规则</li><li>比较规则：某个字符集中的字符比较大小或对某些字符串进行排序的一种规则</li></ul><h3 id="MySQL中的utf8和utf8mb4"><a href="#MySQL中的utf8和utf8mb4" class="headerlink" title="MySQL中的utf8和utf8mb4"></a>MySQL中的utf8和utf8mb4</h3><ul><li>utf8是utf8mb3的别名，是“阉割”的UTF-8字符集，使用1-3字节表示字符</li><li>utf8mb4是正宗的UTF-8字符集，使用1-4字节表示字符，在MySQL 8.0中，已将其设为默认的字符集，5.7以及之前是latin1</li></ul><h3 id="常见的字符集名称"><a href="#常见的字符集名称" class="headerlink" title="常见的字符集名称"></a>常见的字符集名称</h3><ul><li><table><thead><tr><th align="center">字符集名称</th><th align="center">Maxlen(最多需要几个字节表示一个字符)</th></tr></thead><tbody><tr><td align="center">ascii</td><td align="center">1</td></tr><tr><td align="center">latin1</td><td align="center">1</td></tr><tr><td align="center">gb2312</td><td align="center">2</td></tr><tr><td align="center">gbk</td><td align="center">2</td></tr><tr><td align="center">utf8</td><td align="center">3</td></tr><tr><td align="center">utf8mb4</td><td align="center">4</td></tr></tbody></table></li></ul><h2 id="3-3-字符集和比较规则的应用"><a href="#3-3-字符集和比较规则的应用" class="headerlink" title="3.3 字符集和比较规则的应用"></a>3.3 字符集和比较规则的应用</h2><h3 id="MySQL有4个级别的字符集和比较规则"><a href="#MySQL有4个级别的字符集和比较规则" class="headerlink" title="MySQL有4个级别的字符集和比较规则"></a>MySQL有4个级别的字符集和比较规则</h3><ul><li>服务器级别</li><li>数据库级别</li><li>表级别</li><li>列级别</li><li>注意：如果哪个级别没有，就使用上层默认的字符集和比较规则</li></ul><h3 id="从发送请求到接收响应的过程中发生的字符集转换"><a href="#从发送请求到接收响应的过程中发生的字符集转换" class="headerlink" title="从发送请求到接收响应的过程中发生的字符集转换"></a>从发送请求到接收响应的过程中发生的字符集转换</h3><ul><li><p>客户端发送的请求字节序列使用XXX字符集进行编码（取决于default-character-set）</p></li><li><p>服务器接收到请求字节序列后会认为它是采用XXX字符集进行编码（取决于character-set-client）</p></li><li><p>服务器在运行过程中，会把请求的字节序列转换为以XXX字符集编码的字节序列（取决于character-set-connection）</p></li><li><p>服务器在向客户端返回字节序列时，采用XXX字符集进行编码（取决于character-set-results）</p></li><li><p>客户端在收到响应字节序列后，把它们写到黑框框中（取决于default-character-set）</p></li></ul><hr><h1 id="第4章-从一条记录说起——InnoDB记录存储结构"><a href="#第4章-从一条记录说起——InnoDB记录存储结构" class="headerlink" title="第4章 从一条记录说起——InnoDB记录存储结构"></a>第4章 从一条记录说起——InnoDB记录存储结构</h1><h2 id="4-2-InnoDB页介绍"><a href="#4-2-InnoDB页介绍" class="headerlink" title="4.2 InnoDB页介绍"></a>4.2 InnoDB页介绍</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li><p>真正处理数据的过程发生在内存中，所以需要把磁盘中的数据加载到内存中</p></li><li><p>如果是处理写入或修改请求，还需要把内存中的内容刷新到磁盘上</p></li><li><p>当我们想从表中获取某些记录时，InnoDB采取的方式是：将数据划分为若干个页，以页作为磁盘和内存之间的交互的基本单位</p></li><li><p>页的大小一般为16KB</p></li></ul><h2 id="4-3-InnoDB行格式"><a href="#4-3-InnoDB行格式" class="headerlink" title="4.3 InnoDB行格式"></a>4.3 InnoDB行格式</h2><h3 id="4种行格式"><a href="#4种行格式" class="headerlink" title="4种行格式"></a>4种行格式</h3><ul><li><p>COMPACT</p></li><li><p>REDUNDANT</p></li><li><p>DYNAMIC</p></li><li><p>COMPRESSED</p></li></ul><h3 id="COMPACT行格式"><a href="#COMPACT行格式" class="headerlink" title="COMPACT行格式"></a>COMPACT行格式</h3><ul><li><p>一条完整的记录分为记录的额外信息和记录的真实数据</p></li><li><p>记录的额外信息</p><ul><li>变长字段长度列表<ul><li>变长字段占用存储空间分为两部分：真正的数据内容、该数据占用的字节数</li><li>各变长字段的真是数据占用的字节数按照列的顺序逆序存放</li><li>InnoDB在读取记录的变长字段长度列表时先查看表结构</li></ul></li><li>NULL值列表<ul><li>如果表中没有允许NULL值得列，那么不存在</li><li>否则将每个允许存储NULL的列对应一个二进制位，二进制位按照列的顺序逆序排列</li></ul></li><li>记录头信息<ul><li>由固定的5字节组成，用于描述记录的一些属性</li></ul></li></ul></li><li><p>记录的真实数据</p><ul><li><p>除了自己定义的列的数据以外，还有隐藏列</p><ul><li><table><thead><tr><th align="center">列名</th><th align="center">是否必需</th><th align="center">占用空间</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">DB_ROW_ID</td><td align="center">否</td><td align="center">6字节</td><td align="center">行ID，唯一标识一条记录</td></tr><tr><td align="center">DB_TRX_ID</td><td align="center">是</td><td align="center">6字节</td><td align="center">事务ID</td></tr><tr><td align="center">DB_ROLL_PTR</td><td align="center">是</td><td align="center">7字节</td><td align="center">回滚指针</td></tr></tbody></table></li></ul></li><li><p>InnoDB的主键生成策略：1、优先用户自定义，2、没1则选取一个不允许NULL值的UNIQUE键，3、没2则添加并使用DB_ROW_ID</p></li></ul></li></ul><h3 id="REDUNDANT行格式"><a href="#REDUNDANT行格式" class="headerlink" title="REDUNDANT行格式"></a>REDUNDANT行格式</h3><ul><li>一条完整的记录分为记录的额外信息和记录的真实数据</li><li>记录的额外信息<ul><li>字段长度偏移列表</li><li>记录头信息</li></ul></li></ul><h3 id="DYNAMIC和COMPRESSED行格式"><a href="#DYNAMIC和COMPRESSED行格式" class="headerlink" title="DYNAMIC和COMPRESSED行格式"></a>DYNAMIC和COMPRESSED行格式</h3><ul><li><p>REDUNDANT是比较原始的，非紧凑，而剩余三个是较为新的，是紧凑的（占用存储空间更少）</p></li><li><p>这两种行格式类似于COMPACT，只不过在处理溢出列数据时有点差异：它们不会在记录的真实数据处存储列真实数据的前768字节，而是把所有的数据都存储到所谓的溢出页中，只在记录的真实数据处存储指向这些溢出页的地址</p></li><li><p>另外COMPRESSED行格式会采用压缩算法对页面进行压缩</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第1章-装作自己是个小白——初识MySQL&quot;&gt;&lt;a href=&quot;#第1章-装作自己是个小白——初识MySQL&quot; class=&quot;headerlink&quot; title=&quot;第1章 装作自己是个小白——初识MySQL&quot;&gt;&lt;/a&gt;第1章 装作自己是个小白——初识MySQL&lt;/</summary>
      
    
    
    
    <category term="数据库" scheme="https://hellosaltfish.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://hellosaltfish.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>后端开发技术面面经（持续更新中...）</title>
    <link href="https://hellosaltfish.github.io/2021/053110342.html"/>
    <id>https://hellosaltfish.github.io/2021/053110342.html</id>
    <published>2021-05-31T04:16:34.000Z</published>
    <updated>2021-08-03T15:31:18.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="岗位-python-web开发"><a href="#岗位-python-web开发" class="headerlink" title="岗位:python web开发"></a>岗位:python web开发</h1><ul><li><h4 id="状态-已offer"><a href="#状态-已offer" class="headerlink" title="状态:已offer"></a>状态:已offer</h4></li><li><h4 id="流程-一轮技术面"><a href="#流程-一轮技术面" class="headerlink" title="流程:一轮技术面"></a>流程:一轮技术面</h4></li><li><h4 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h4><ul><li><pre class=" language-python"><code class="language-python">学python多久了？学习过程中遇到的最大困难是什么？python3有多继承吗？python2和python3有什么区别，列举几点？简单描述下静态方法和类方法django了解多少？sql用的熟练吗？inner join是什么？自连接和外连接哪个效率高？了解过爬虫吗？写一个正则，匹配<span class="token number">11</span>位手机号用过非关系数据库吗？redis或者mongodb之类的？能实习多久？</code></pre></li></ul></li></ul><hr><h1 id="岗位-python开发"><a href="#岗位-python开发" class="headerlink" title="岗位:python开发"></a>岗位:python开发</h1><ul><li><h4 id="状态-已offer-1"><a href="#状态-已offer-1" class="headerlink" title="状态:已offer"></a>状态:已offer</h4></li><li><h4 id="流程-一轮技术面-1"><a href="#流程-一轮技术面-1" class="headerlink" title="流程:一轮技术面"></a>流程:一轮技术面</h4></li><li><h4 id="面试题目-1"><a href="#面试题目-1" class="headerlink" title="面试题目"></a>面试题目</h4><ul><li><pre class=" language-python"><code class="language-python">python的字典底层是怎么实现的？两道编程题：<span class="token number">1</span><span class="token punctuation">.</span> 假设数组nums只有 一个重复的整数 ，找出这个重复的数 。<span class="token number">2</span><span class="token punctuation">.</span> 给定一个数组 nums，编写一个函数将所有 <span class="token number">0</span> 移动到数组的末尾，同时保持非零元素的相对顺序随便设计一个包含外键的数据库，口述表的结构sql题：有两张表，查询学生id为<span class="token number">3</span>的平均成绩会django的orm吗，用orm写一下这道sql题后端是如何发送数据给前端的，具体是怎么实现的，讲底层原理你的项目有部署吗，有了解过docker吗</code></pre></li></ul></li></ul><hr><h1 id="岗位-python开发兼助教"><a href="#岗位-python开发兼助教" class="headerlink" title="岗位:python开发兼助教"></a>岗位:python开发兼助教</h1><ul><li><h4 id="状态-已offer-2"><a href="#状态-已offer-2" class="headerlink" title="状态:已offer"></a>状态:已offer</h4></li><li><h4 id="流程-笔试-一轮技术面-hr面"><a href="#流程-笔试-一轮技术面-hr面" class="headerlink" title="流程:笔试+一轮技术面+hr面"></a>流程:笔试+一轮技术面+hr面</h4></li><li><h4 id="面试题目-2"><a href="#面试题目-2" class="headerlink" title="面试题目"></a>面试题目</h4><ul><li><pre class=" language-python"><code class="language-python">五道编程题：<span class="token number">1</span><span class="token punctuation">.</span>异常处理<span class="token number">2</span><span class="token punctuation">.</span>判断闰年<span class="token number">3</span><span class="token punctuation">.</span>格式化输出<span class="token number">4</span><span class="token punctuation">.</span>大小写转换<span class="token number">5</span><span class="token punctuation">.</span>设计一个不带参装饰器，计算运行时间</code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;岗位-python-web开发&quot;&gt;&lt;a href=&quot;#岗位-python-web开发&quot; class=&quot;headerlink&quot; title=&quot;岗位:python web开发&quot;&gt;&lt;/a&gt;岗位:python web开发&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;状态-已</summary>
      
    
    
    
    <category term="开发面试" scheme="https://hellosaltfish.github.io/categories/%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面经" scheme="https://hellosaltfish.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>基于socket套接字通信</title>
    <link href="https://hellosaltfish.github.io/2021/050962281.html"/>
    <id>https://hellosaltfish.github.io/2021/050962281.html</id>
    <published>2021-05-09T13:05:49.000Z</published>
    <updated>2021-08-09T13:21:32.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基于TCP通信"><a href="#1-基于TCP通信" class="headerlink" title="1.基于TCP通信"></a>1.基于TCP通信</h1><h2 id="server端"><a href="#server端" class="headerlink" title="server端"></a>server端</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># 买手机</span>phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 流式协议 ==》tcp</span><span class="token comment" spellcheck="true"># 绑定手机卡   后面绑定的是端口号</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开机   5是半连接池的大小</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 待机  conn是三次握手的双向通路，client_address是客户端的ip+port</span>    conn<span class="token punctuation">,</span> client_address <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 收/发消息 1024Bytes代表能接收的最大数据量,收到的是字节类型，bytes</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 针对windows</span>            <span class="token keyword">break</span>    <span class="token comment" spellcheck="true"># 关闭电话连接conn  必须的回收资源操作</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关机 可选</span><span class="token comment" spellcheck="true"># phone.close()</span></code></pre><h2 id="client端"><a href="#client端" class="headerlink" title="client端"></a>client端</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># 买手机</span>phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拨通号码</span>phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入要发送的内容："</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> msg <span class="token operator">==</span><span class="token string">'88'</span> <span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> <span class="token operator">not</span> msg<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 必须的回收资源操作</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="2-基于UDP通信"><a href="#2-基于UDP通信" class="headerlink" title="2.基于UDP通信"></a>2.基于UDP通信</h1><h2 id="server端-1"><a href="#server端-1" class="headerlink" title="server端"></a>server端</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># 买手机</span>phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 数据报协议 ==》udp</span><span class="token comment" spellcheck="true"># 绑定手机卡   后面绑定的是端口号</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 收/发消息 1024Bytes代表能接收的最大数据量,收到的是字节类型，bytes</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    data<span class="token punctuation">,</span>client_add<span class="token operator">=</span> phone<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    phone<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>client_add<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭电话连接conn  必须的回收资源操作</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="client端-1"><a href="#client端-1" class="headerlink" title="client端"></a>client端</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># 买手机</span>phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    phone<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data<span class="token punctuation">,</span>server_add <span class="token operator">=</span> phone<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 必须的回收资源操作</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="3-TCP实现并发"><a href="#3-TCP实现并发" class="headerlink" title="3.TCP实现并发"></a>3.TCP实现并发</h1><h2 id="server端-2"><a href="#server端-2" class="headerlink" title="server端"></a>server端</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 要有固定IP和PORT</span><span class="token comment" spellcheck="true"># 24小时提供服务</span><span class="token comment" spellcheck="true"># 能实现并发</span><span class="token keyword">import</span> socket<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">def</span> <span class="token function">communciate</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 通信循环</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">server</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 括号内不加参数默认就是TCP协议</span>    server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 开设多线程或者多进程处理客户端通信</span>        t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>communciate<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>server<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="client端-2"><a href="#client端-2" class="headerlink" title="client端"></a>client端</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'hello'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-基于TCP通信&quot;&gt;&lt;a href=&quot;#1-基于TCP通信&quot; class=&quot;headerlink&quot; title=&quot;1.基于TCP通信&quot;&gt;&lt;/a&gt;1.基于TCP通信&lt;/h1&gt;&lt;h2 id=&quot;server端&quot;&gt;&lt;a href=&quot;#server端&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Python" scheme="https://hellosaltfish.github.io/categories/Python/"/>
    
    
    <category term="高阶部分" scheme="https://hellosaltfish.github.io/tags/%E9%AB%98%E9%98%B6%E9%83%A8%E5%88%86/"/>
    
    <category term="网络" scheme="https://hellosaltfish.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="操作系统" scheme="https://hellosaltfish.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>装饰器</title>
    <link href="https://hellosaltfish.github.io/2021/040138966.html"/>
    <id>https://hellosaltfish.github.io/2021/040138966.html</id>
    <published>2021-04-01T07:03:45.000Z</published>
    <updated>2021-08-03T15:30:44.203Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h1 id="无参装饰器"><a href="#无参装饰器" class="headerlink" title="无参装饰器"></a>无参装饰器</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">outter</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token keyword">return</span> wrapper@outter<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"it's over %s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'ok'</span><span class="token comment" spellcheck="true"># index = outter(index)</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span>ret <span class="token operator">=</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span></code></pre></li></ul><h1 id="有参装饰器"><a href="#有参装饰器" class="headerlink" title="有参装饰器"></a>有参装饰器</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token triple-quoted-string string">'''  @author: saltfish  @contact: 17681861018  @file.txt: 01 带参数装饰器.py  @time: 2020/12/20 12:36 '''</span><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>from_add<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> from_add <span class="token operator">==</span> <span class="token string">'file.txt'</span> <span class="token operator">and</span> name <span class="token operator">==</span> <span class="token string">'xy'</span> <span class="token operator">and</span> password <span class="token operator">==</span> <span class="token number">1018</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功,源于文件"</span><span class="token punctuation">)</span>                ret <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>                <span class="token keyword">return</span> ret            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登陆失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> f    <span class="token keyword">return</span> wrapper@auth<span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'&amp;#123;name&amp;#125;通过用&amp;#123;password&amp;#125;登录成功'</span><span class="token punctuation">)</span>test1<span class="token punctuation">(</span><span class="token string">'xy'</span><span class="token punctuation">,</span> <span class="token number">1018</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;无参装饰器&quot;&gt;&lt;a href=&quot;#无参装饰器&quot; class=&quot;headerlink&quot; title=&quot;无参装饰器&quot;&gt;&lt;/a&gt;无参装饰器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=</summary>
      
    
    
    
    <category term="Python" scheme="https://hellosaltfish.github.io/categories/Python/"/>
    
    
    <category term="高阶部分" scheme="https://hellosaltfish.github.io/tags/%E9%AB%98%E9%98%B6%E9%83%A8%E5%88%86/"/>
    
    <category term="语法" scheme="https://hellosaltfish.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>手敲部分排序算法</title>
    <link href="https://hellosaltfish.github.io/2020/090764845.html"/>
    <id>https://hellosaltfish.github.io/2020/090764845.html</id>
    <published>2020-09-06T23:25:23.000Z</published>
    <updated>2021-08-08T15:01:56.800Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>l1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>l1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    min_index <span class="token operator">=</span> i    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> l1<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>            min_index <span class="token operator">=</span> j    <span class="token keyword">if</span> min_index <span class="token operator">!=</span> i<span class="token punctuation">:</span>      l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> l1<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>li_len <span class="token operator">=</span> len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> li_len<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> l1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">:</span>            l1<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        l1<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> low    j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid <span class="token operator">and</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        <span class="token keyword">if</span> l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    l1<span class="token punctuation">[</span>low<span class="token punctuation">:</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        merge_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>        merge_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span>        merge<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>merge_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token operator">and</span> l1<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> temp<span class="token punctuation">:</span>            right <span class="token operator">-=</span> <span class="token number">1</span>        l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>right<span class="token punctuation">]</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token operator">and</span> l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">:</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        l1<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    l1<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> temp    <span class="token keyword">return</span> left<span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token number">-1</span><span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token keyword">import</span> randoml1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>quick_sort<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language</summary>
      
    
    
    
    <category term="Python" scheme="https://hellosaltfish.github.io/categories/Python/"/>
    
    
    <category term="语法" scheme="https://hellosaltfish.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
    <category term="排序算法" scheme="https://hellosaltfish.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
